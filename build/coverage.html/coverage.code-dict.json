{"/home/travis/build/npmtest/node-npmtest-inert/test.js":"/* istanbul instrument in package npmtest_inert */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-inert/lib.npmtest_inert.js":"/* istanbul instrument in package npmtest_inert */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_inert = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_inert = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-inert/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-inert && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_inert */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_inert\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_inert.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_inert.rollup.js'] =\n            local.assetsDict['/assets.npmtest_inert.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_inert.__dirname + '/lib.npmtest_inert.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-inert/node_modules/inert/lib/index.js":"'use strict';\n\n// Load modules\n\nconst Directory = require('./directory');\nconst Etag = require('./etag');\nconst File = require('./file');\nconst Hoek = require('hoek');\n\n\n// Declare internals\n\nconst internals = {\n    defaults: {\n        etagsCacheMaxSize: 1000\n    }\n};\n\n\nexports.register = function (server, options, next) {\n\n    const settings = Hoek.applyToDefaults(internals.defaults, options);\n\n    server.expose('_etags', settings.etagsCacheMaxSize ? new Etag.Cache(settings.etagsCacheMaxSize) : null);\n\n    server.handler('file', File.handler);\n    server.handler('directory', Directory.handler);\n\n    server.decorate('reply', 'file', function (path, responseOptions) {\n\n        // Set correct confine value\n\n        responseOptions = responseOptions || {};\n\n        if (typeof responseOptions.confine === 'undefined' || responseOptions.confine === true) {\n            responseOptions.confine = '.';\n        }\n\n        Hoek.assert(responseOptions.end === undefined || +responseOptions.start <= +responseOptions.end, 'options.start must be less than or equal to options.end');\n\n        return this.response(File.response(path, responseOptions, this.request));\n    });\n\n    return next();\n};\n\n\nexports.register.attributes = {\n    pkg: require('../package.json'),\n    connections: false,\n    once: true\n};\n","/home/travis/build/npmtest/node-npmtest-inert/node_modules/inert/lib/directory.js":"'use strict';\n\n// Load modules\n\nconst Fs = require('fs');\nconst Path = require('path');\nconst Boom = require('boom');\nconst Hoek = require('hoek');\nconst Items = require('items');\nconst Joi = require('joi');\nconst File = require('./file');\n\n\n// Declare internals\n\nconst internals = {};\n\n\ninternals.schema = Joi.object({\n    path: Joi.alternatives(Joi.array().items(Joi.string()).single(), Joi.func()).required(),\n    index: Joi.alternatives(Joi.boolean(), Joi.array().items(Joi.string()).single()).default(true),\n    listing: Joi.boolean(),\n    showHidden: Joi.boolean(),\n    redirectToSlash: Joi.boolean(),\n    lookupCompressed: Joi.boolean(),\n    lookupMap: Joi.object().min(1).pattern(/.+/, Joi.string()),\n    etagMethod: Joi.string().valid('hash', 'simple').allow(false),\n    defaultExtension: Joi.string().alphanum()\n});\n\n\nexports.handler = function (route, options) {\n\n    const settings = Joi.attempt(options, internals.schema, 'Invalid directory handler options (' + route.path + ')');\n    Hoek.assert(route.path[route.path.length - 1] === '}', 'The route path for a directory handler must end with a parameter:', route.path);\n\n    const paramName = /\\w+/.exec(route.path.slice(route.path.lastIndexOf('{')))[0];\n\n    const normalize = (paths) => {\n\n        const normalized = [];\n        for (let i = 0; i < paths.length; ++i) {\n            let path = paths[i];\n\n            if (!Path.isAbsolute(path)) {\n                path = Path.join(route.settings.files.relativeTo, path);\n            }\n\n            normalized.push(path);\n        }\n\n        return normalized;\n    };\n\n    const normalized = (Array.isArray(settings.path) ? normalize(settings.path) : []);            // Array or function\n\n    const indexNames = (settings.index === true) ? ['index.html'] : (settings.index || []);\n\n    // Declare handler\n\n    const handler = (request, reply) => {\n\n        let paths = normalized;\n        if (typeof settings.path === 'function') {\n            const result = settings.path.call(null, request);\n            if (result instanceof Error) {\n                return reply(result);\n            }\n\n            if (Array.isArray(result)) {\n                paths = normalize(result);\n            }\n            else if (typeof result === 'string') {\n                paths = normalize([result]);\n            }\n            else {\n                return reply(Boom.badImplementation('Invalid path function'));\n            }\n        }\n\n        // Append parameter\n\n        const selection = request.params[paramName];\n        if (selection &&\n            !settings.showHidden &&\n            internals.isFileHidden(selection)) {\n\n            return reply(Boom.notFound());\n        }\n\n        // Generate response\n\n        const resource = request.path;\n        const hasTrailingSlash = resource.endsWith('/');\n        const fileOptions = {\n            confine: null,\n            lookupCompressed: settings.lookupCompressed,\n            lookupMap: settings.lookupMap,\n            etagMethod: settings.etagMethod\n        };\n\n        Items.serial(paths, (baseDir, nextPath) => {\n\n            fileOptions.confine = baseDir;\n\n            let path = selection || '';\n\n            File.load(path, request, fileOptions, (response) => {\n\n                // File loaded successfully\n\n                if (!response.isBoom) {\n                    return reply(response);\n                }\n\n                // Not found\n\n                const err = response;\n                if (err.output.statusCode === 404) {\n                    if (!settings.defaultExtension) {\n                        return nextPath();\n                    }\n\n                    if (hasTrailingSlash) {\n                        path = path.slice(0, -1);\n                    }\n\n                    return File.load(path + '.' + settings.defaultExtension, request, fileOptions, (extResponse) => {\n\n                        if (!extResponse.isBoom) {\n                            return reply(extResponse);\n                        }\n\n                        return nextPath();\n                    });\n                }\n\n                // Propagate non-directory errors\n\n                if (err.output.statusCode !== 403 || err.data !== 'EISDIR') {\n                    return reply(err);\n                }\n\n                // Directory\n\n                if (indexNames.length === 0 &&\n                    !settings.listing) {\n\n                    return reply(Boom.forbidden());\n                }\n\n                if (settings.redirectToSlash !== false &&                       // Defaults to true\n                    !request.connection.settings.router.stripTrailingSlash &&\n                    !hasTrailingSlash) {\n\n                    return reply.redirect(resource + '/');\n                }\n\n                Items.serial(indexNames, (indexName, nextIndex) => {\n\n                    const indexFile = Path.join(path, indexName);\n                    File.load(indexFile, request, fileOptions, (indexResponse) => {\n\n                        // File loaded successfully\n\n                        if (!indexResponse.isBoom) {\n                            return reply(indexResponse);\n                        }\n\n                        // Directory\n\n                        const err = indexResponse;\n                        if (err.output.statusCode !== 404) {\n                            return reply(Boom.badImplementation(indexName + ' is a directory'));\n                        }\n\n                        // Not found, try the next one\n\n                        return nextIndex();\n                    });\n                },\n                (/* err */) => {\n\n                    // None of the index files were found\n\n                    if (!settings.listing) {\n                        return reply(Boom.forbidden());\n                    }\n\n                    return internals.generateListing(Path.join(baseDir, path), resource, selection, hasTrailingSlash, settings, request, reply);\n                });\n            });\n        },\n        (/* err */) => {\n\n            return reply(Boom.notFound());\n        });\n    };\n\n    return handler;\n};\n\n\ninternals.generateListing = function (path, resource, selection, hasTrailingSlash, settings, request, reply) {\n\n    Fs.readdir(path, (err, files) => {\n\n        if (err) {\n            return reply(Boom.internal('Error accessing directory', err));\n        }\n\n        resource = decodeURIComponent(resource);\n        const display = Hoek.escapeHtml(resource);\n        let html = '<html><head><title>' + display + '</title></head><body><h1>Directory: ' + display + '</h1><ul>';\n\n        if (selection) {\n            const parent = resource.substring(0, resource.lastIndexOf('/', resource.length - (hasTrailingSlash ? 2 : 1))) + '/';\n            html = html + '<li><a href=\"' + internals.pathEncode(parent) + '\">Parent Directory</a></li>';\n        }\n\n        for (let i = 0; i < files.length; ++i) {\n            if (settings.showHidden ||\n                !internals.isFileHidden(files[i])) {\n\n                html = html + '<li><a href=\"' + internals.pathEncode(resource + (selection && !hasTrailingSlash ? '/' : '') + files[i]) + '\">' + Hoek.escapeHtml(files[i]) + '</a></li>';\n            }\n        }\n\n        html = html + '</ul></body></html>';\n\n        return reply(request.generateResponse(html));\n    });\n};\n\n\ninternals.isFileHidden = function (path) {\n\n    return /(^|[\\\\\\/])\\.([^.\\\\\\/]|\\.[^\\\\\\/])/.test(path);           // Starts with a '.' or contains '/.' or '\\.', which is not followed by a '/' or '\\' or '.'\n};\n\n\ninternals.pathEncode = function (path) {\n\n    return encodeURIComponent(path).replace(/%2F/g, '/').replace(/%5C/g, '\\\\');\n};\n","/home/travis/build/npmtest/node-npmtest-inert/node_modules/inert/lib/file.js":"'use strict';\n\n// Load modules\n\nconst Path = require('path');\nconst Ammo = require('ammo');\nconst Boom = require('boom');\nconst Hoek = require('hoek');\nconst Joi = require('joi');\nconst Etag = require('./etag');\nconst Fs = require('./fs');\n\n\n// Declare internals\n\nconst internals = {};\n\n\ninternals.defaultMap = {\n    gzip: '.gz'\n};\n\n\ninternals.schema = Joi.alternatives([\n    Joi.string(),\n    Joi.func(),\n    Joi.object({\n        path: Joi.alternatives(Joi.string(), Joi.func()).required(),\n        confine: Joi.alternatives(Joi.string(), Joi.boolean()).default(true),\n        filename: Joi.string(),\n        mode: Joi.string().valid('attachment', 'inline').allow(false),\n        lookupCompressed: Joi.boolean(),\n        lookupMap: Joi.object().min(1).pattern(/.+/, Joi.string()),\n        etagMethod: Joi.string().valid('hash', 'simple').allow(false),\n        start: Joi.number().integer().min(0).default(0),\n        end: Joi.number().integer().min(Joi.ref('start'))\n    })\n        .with('filename', 'mode')\n]);\n\n\nexports.handler = function (route, options) {\n\n    let settings = Joi.attempt(options, internals.schema, 'Invalid file handler options (' + route.path + ')');\n    settings = (typeof options !== 'object' ? { path: options, confine: '.' } : settings);\n    settings.confine = settings.confine === true ? '.' : settings.confine;\n    Hoek.assert(typeof settings.path !== 'string' || settings.path[settings.path.length - 1] !== '/', 'File path cannot end with a \\'/\\':', route.path);\n\n    const handler = (request, reply) => {\n\n        const path = (typeof settings.path === 'function' ? settings.path(request) : settings.path);\n        return reply(exports.response(path, settings, request));\n    };\n\n    return handler;\n};\n\n\nexports.load = function (path, request, options, callback) {\n\n    const response = exports.response(path, options, request, true);\n    return internals.prepare(response, callback);\n};\n\n\nexports.response = function (path, options, request, _preloaded) {\n\n    Hoek.assert(!options.mode || ['attachment', 'inline'].indexOf(options.mode) !== -1, 'options.mode must be either false, attachment, or inline');\n\n    if (options.confine) {\n        const confineDir = Path.resolve(request.route.settings.files.relativeTo, options.confine);\n        path = Path.isAbsolute(path) ? Path.normalize(path) : Path.join(confineDir, path);\n\n        // Verify that resolved path is within confineDir\n        if (path.lastIndexOf(confineDir, 0) !== 0) {\n            path = null;\n        }\n    }\n    else {\n        path = Path.isAbsolute(path) ? Path.normalize(path) : Path.join(request.route.settings.files.relativeTo, path);\n    }\n\n    const source = {\n        path,\n        settings: options,\n        stat: null,\n        file: null\n    };\n\n    const prepare = _preloaded ? null : internals.prepare;\n\n    return request.generateResponse(source, { variety: 'file', marshal: internals.marshal, prepare, close: internals.close });\n};\n\n\ninternals.prepare = function (response, callback) {\n\n    const path = response.source.path;\n\n    if (path === null) {\n        return process.nextTick(() => {\n\n            return callback(Boom.forbidden(null, 'EACCES'));\n        });\n    }\n\n    const file = response.source.file = new Fs.File(path);\n\n    file.openStat('r', (err, stat) => {\n\n        if (err) {\n            return callback(err);\n        }\n\n        const start = response.source.settings.start || 0;\n        if (response.source.settings.end !== undefined) {\n            response.bytes(response.source.settings.end - start + 1);\n        }\n        else {\n            response.bytes(stat.size - start);\n        }\n\n        if (!response.headers['content-type']) {\n            response.type(response.request.server.mime.path(path).type || 'application/octet-stream');\n        }\n\n        response.header('last-modified', stat.mtime.toUTCString());\n\n        if (response.source.settings.mode) {\n            const fileName = response.source.settings.filename || Path.basename(path);\n            response.header('content-disposition', response.source.settings.mode + '; filename=' + encodeURIComponent(fileName));\n        }\n\n        Etag.apply(response, stat, (err) => {\n\n            if (err) {\n                internals.close(response);\n                return callback(err);\n            }\n\n            return callback(response);\n        });\n    });\n};\n\n\ninternals.marshal = function (response, next) {\n\n    if (response.source.settings.lookupCompressed &&\n        !response.source.settings.start &&\n        response.source.settings.end === undefined &&\n        response.request.connection.settings.compression) {\n\n        const lookupMap = response.source.settings.lookupMap || internals.defaultMap;\n        const encoding = response.request.info.acceptEncoding;\n        const extension = lookupMap.hasOwnProperty(encoding) ? lookupMap[encoding] : null;\n        if (extension) {\n            const gzFile = new Fs.File(`${response.source.path}${extension}`);\n            return gzFile.openStat('r', (err, stat) => {\n\n                if (!err) {\n                    response.source.file.close();\n                    response.source.file = gzFile;\n\n                    response.bytes(stat.size);\n                    response.header('content-encoding', encoding);\n                    response.vary('accept-encoding');\n                }\n\n                return internals.createStream(response, next);\n            });\n        }\n    }\n\n    return internals.createStream(response, next);\n};\n\n\ninternals.addContentRange = function (response, next) {\n\n    const request = response.request;\n    const length = response.headers['content-length'];\n    let range = null;\n\n    if (Hoek.reach(request.route.settings, 'response.ranges') !== false) {     // Backwards compatible comparison\n        if (request.headers.range && length) {\n\n            // Check If-Range\n\n            if (!request.headers['if-range'] ||\n                request.headers['if-range'] === response.headers.etag) {            // Ignoring last-modified date (weak)\n\n                // Check that response is not encoded once transmitted\n\n                const mime = request.server.mime.type(response.headers['content-type'] || 'application/octet-stream');\n                const encoding = (request.connection.settings.compression && mime.compressible && !response.headers['content-encoding'] ? request.info.acceptEncoding : null);\n\n                if (encoding === 'identity' || !encoding) {\n\n                    // Parse header\n\n                    const ranges = Ammo.header(request.headers.range, length);\n                    if (!ranges) {\n                        const error = Boom.rangeNotSatisfiable();\n                        error.output.headers['content-range'] = 'bytes */' + length;\n                        return next(error);\n                    }\n\n                    // Prepare transform\n\n                    if (ranges.length === 1) {                                          // Ignore requests for multiple ranges\n                        range = ranges[0];\n                        response.code(206);\n                        response.bytes(range.to - range.from + 1);\n                        response.header('content-range', 'bytes ' + range.from + '-' + range.to + '/' + length);\n                    }\n                }\n            }\n        }\n\n        response.header('accept-ranges', 'bytes');\n    }\n\n    return next(null, range);\n};\n\n\ninternals.createStream = function (response, next) {\n\n    const source = response.source;\n\n    Hoek.assert(source.file !== null);\n\n    internals.addContentRange(response, (err, range) => {\n\n        if (err) {\n            return next(err);\n        }\n\n        const options = {\n            start: source.settings.start || 0,\n            end: source.settings.end\n        };\n\n        if (range) {\n            options.end = range.to + options.start;\n            options.start = range.from + options.start;\n        }\n\n        return next(null, source.file.createReadStream(options));\n    });\n};\n\n\ninternals.close = function (response) {\n\n    if (response.source.file !== null) {\n        response.source.file.close();\n        response.source.file = null;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-inert/node_modules/inert/lib/etag.js":"'use strict';\n\n// Load modules\n\nconst Crypto = require('crypto');\nconst Boom = require('boom');\nconst Hoek = require('hoek');\nconst LruCache = require('lru-cache');\n\n\n// Declare internals\n\nconst internals = {\n    pendings: Object.create(null)\n};\n\n\ninternals.computeHashed = function (response, stat, next) {\n\n    const etags = response.request.server.plugins.inert._etags;\n    if (!etags) {\n        return next(null, null);\n    }\n\n    // Use stat info for an LRU cache key.\n\n    const path = response.source.path;\n    const cachekey = [path, stat.ino, stat.size, stat.mtime.getTime()].join('-');\n\n    // The etag hashes the file contents in order to be consistent across distributed deployments\n\n    const cachedEtag = etags.get(cachekey);\n    if (cachedEtag) {\n        return next(null, cachedEtag);\n    }\n\n    let nexts = internals.pendings[cachekey];\n    if (nexts) {\n        return nexts.push(next);\n    }\n\n    // Start hashing\n\n    nexts = [next];\n    internals.pendings[cachekey] = nexts;\n\n    internals.hashFile(response, (err, hash) => {\n\n        if (!err) {\n            etags.set(cachekey, hash);\n        }\n\n        // Call pending callbacks\n\n        delete internals.pendings[cachekey];\n        for (let i = 0; i < nexts.length; ++i) {\n            Hoek.nextTick(nexts[i])(err, hash);\n        }\n    });\n};\n\n\ninternals.hashFile = function (response, callback) {\n\n    const hash = Crypto.createHash('sha1');\n    hash.setEncoding('hex');\n\n    const fileStream = response.source.file.createReadStream({ autoClose: false });\n    fileStream.pipe(hash);\n\n    let done = function (err) {\n\n        if (err) {\n            return callback(Boom.wrap(err, null, 'Failed to hash file'));\n        }\n\n        return callback(null, hash.read());\n    };\n\n    done = Hoek.once(done);\n\n    fileStream.on('end', done);\n    fileStream.on('error', done);\n};\n\n\ninternals.computeSimple = function (response, stat, next) {\n\n    const size = stat.size.toString(16);\n    const mtime = stat.mtime.getTime().toString(16);\n\n    return next(null, size + '-' + mtime);\n};\n\n\nexports.apply = function (response, stat, next) {\n\n    const etagMethod = response.source.settings.etagMethod;\n    if (etagMethod === false) {\n        return next();\n    }\n\n    const applyEtag = (err, etag) => {\n\n        if (err) {\n            return next(err);\n        }\n\n        if (etag !== null) {\n            response.etag(etag, { vary: true });\n        }\n\n        return next();\n    };\n\n    if (etagMethod === 'simple') {\n        return internals.computeSimple(response, stat, applyEtag);\n    }\n\n    return internals.computeHashed(response, stat, applyEtag);\n};\n\n\nexports.Cache = LruCache;\n","/home/travis/build/npmtest/node-npmtest-inert/node_modules/inert/lib/fs.js":"'use strict';\n\n// Load modules\n\nconst Fs = require('fs');\nconst Boom = require('boom');\nconst Hoek = require('hoek');\n\n\n// Declare internals\n\nconst internals = {};\n\n\nexports.File = function (path) {\n\n    this.path = path;\n    this.fd = null;\n};\n\n\nexports.File.prototype.open = function (mode, callback) {\n\n    Hoek.assert(this.fd === null);\n\n    Fs.open(this.path, mode, (err, fd) => {\n\n        if (err) {\n            if (this.path.indexOf('\\u0000') !== -1 || err.code === 'ENOENT') {\n                return callback(Boom.notFound());\n            }\n\n            if (err.code === 'EACCES' || err.code === 'EPERM') {\n                return callback(Boom.forbidden(null, err.code));\n            }\n\n            return callback(Boom.wrap(err, null, 'Failed to open file'));\n        }\n\n        this.fd = fd;\n\n        return callback();\n    });\n};\n\n\nexports.File.prototype.close = function () {\n\n    if (this.fd !== null) {\n        Fs.close(this.fd, Hoek.ignore);\n        this.fd = null;\n    }\n};\n\n\nexports.File.prototype.stat = function (callback) {\n\n    Hoek.assert(this.fd !== null);\n\n    Fs.fstat(this.fd, (err, stat) => {\n\n        if (err) {\n            this.close(this.fd);\n            return callback(Boom.wrap(err, null, 'Failed to stat file'));\n        }\n\n        if (stat.isDirectory()) {\n            this.close(this.fd);\n            return callback(Boom.forbidden(null, 'EISDIR'));\n        }\n\n        return callback(null, stat);\n    });\n};\n\n\nexports.File.prototype.openStat = function (mode, callback) {\n\n    this.open(mode, (err) => {\n\n        if (err) {\n            return callback(err);\n        }\n\n        this.stat(callback);\n    });\n};\n\n\nexports.File.prototype.createReadStream = function (options) {\n\n    Hoek.assert(this.fd !== null);\n\n    options = Object.assign({ fd: this.fd, start: 0 }, options);\n\n    const stream = Fs.createReadStream(this.path, options);\n\n    if (options.autoClose !== false) {\n        this.fd = null;           // The stream now owns the fd\n    }\n\n    return stream;\n};\n"}